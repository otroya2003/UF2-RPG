//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputSystem/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Player1_map1"",
            ""id"": ""52aaa569-6a24-4bba-b305-6766e2200769"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""437e229e-e606-4d02-b85d-27ff775d208f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""a86ef559-ae9b-45ea-a0be-8e0a79b02aaf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move2"",
                    ""type"": ""Value"",
                    ""id"": ""baa9c053-22e0-4ca1-8e1c-045a0e9a0515"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Atack"",
                    ""type"": ""Button"",
                    ""id"": ""b03ba5df-f3b4-47c2-abb6-0b999d56deb3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Combo"",
                    ""type"": ""Button"",
                    ""id"": ""22c7b7ad-30cd-4abf-ad06-80fde140c1bf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""b7781dca-33fb-4846-8abb-352a79adcc80"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4fc0d5c0-160f-44b2-8e31-fb1db99cfe27"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""349d08ce-a7c6-4195-8a29-5cc746d55b08"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b82b5a0e-a108-464f-af44-86bd766e6e4e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a02bd850-9a4a-4fe4-b27d-0c78d20bc666"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cfbcdbc8-96d9-4376-b1ec-69c98bbe4b58"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""854500bd-4f62-4752-9ba8-deeecf1f685c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""93cd2c36-6899-4187-90a5-f2a987566eee"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""ea089f58-d449-4e9e-8d62-245e27cd8570"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c5065ef0-c675-42df-84c0-86d5e93c5694"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Atack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6987631-b891-4b07-a39c-04777b88bb95"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Combo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player1_map1
        m_Player1_map1 = asset.FindActionMap("Player1_map1", throwIfNotFound: true);
        m_Player1_map1_Move = m_Player1_map1.FindAction("Move", throwIfNotFound: true);
        m_Player1_map1_Interact = m_Player1_map1.FindAction("Interact", throwIfNotFound: true);
        m_Player1_map1_Move2 = m_Player1_map1.FindAction("Move2", throwIfNotFound: true);
        m_Player1_map1_Atack = m_Player1_map1.FindAction("Atack", throwIfNotFound: true);
        m_Player1_map1_Combo = m_Player1_map1.FindAction("Combo", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player1_map1
    private readonly InputActionMap m_Player1_map1;
    private List<IPlayer1_map1Actions> m_Player1_map1ActionsCallbackInterfaces = new List<IPlayer1_map1Actions>();
    private readonly InputAction m_Player1_map1_Move;
    private readonly InputAction m_Player1_map1_Interact;
    private readonly InputAction m_Player1_map1_Move2;
    private readonly InputAction m_Player1_map1_Atack;
    private readonly InputAction m_Player1_map1_Combo;
    public struct Player1_map1Actions
    {
        private @PlayerActions m_Wrapper;
        public Player1_map1Actions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player1_map1_Move;
        public InputAction @Interact => m_Wrapper.m_Player1_map1_Interact;
        public InputAction @Move2 => m_Wrapper.m_Player1_map1_Move2;
        public InputAction @Atack => m_Wrapper.m_Player1_map1_Atack;
        public InputAction @Combo => m_Wrapper.m_Player1_map1_Combo;
        public InputActionMap Get() { return m_Wrapper.m_Player1_map1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player1_map1Actions set) { return set.Get(); }
        public void AddCallbacks(IPlayer1_map1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Player1_map1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player1_map1ActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Move2.started += instance.OnMove2;
            @Move2.performed += instance.OnMove2;
            @Move2.canceled += instance.OnMove2;
            @Atack.started += instance.OnAtack;
            @Atack.performed += instance.OnAtack;
            @Atack.canceled += instance.OnAtack;
            @Combo.started += instance.OnCombo;
            @Combo.performed += instance.OnCombo;
            @Combo.canceled += instance.OnCombo;
        }

        private void UnregisterCallbacks(IPlayer1_map1Actions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Move2.started -= instance.OnMove2;
            @Move2.performed -= instance.OnMove2;
            @Move2.canceled -= instance.OnMove2;
            @Atack.started -= instance.OnAtack;
            @Atack.performed -= instance.OnAtack;
            @Atack.canceled -= instance.OnAtack;
            @Combo.started -= instance.OnCombo;
            @Combo.performed -= instance.OnCombo;
            @Combo.canceled -= instance.OnCombo;
        }

        public void RemoveCallbacks(IPlayer1_map1Actions instance)
        {
            if (m_Wrapper.m_Player1_map1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer1_map1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Player1_map1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player1_map1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player1_map1Actions @Player1_map1 => new Player1_map1Actions(this);
    public interface IPlayer1_map1Actions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnMove2(InputAction.CallbackContext context);
        void OnAtack(InputAction.CallbackContext context);
        void OnCombo(InputAction.CallbackContext context);
    }
}
