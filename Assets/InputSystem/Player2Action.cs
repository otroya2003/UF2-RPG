//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/InputSystem/Player2Action.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player2Action: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player2Action()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player2Action"",
    ""maps"": [
        {
            ""name"": ""Player2_map1"",
            ""id"": ""d74ee376-1ce1-4773-8c21-15302474c727"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8edc25f2-9308-4912-a5a0-eccf6ae5e6cd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""bd58c168-65ed-47c5-b7ae-65d86b538235"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move2"",
                    ""type"": ""Value"",
                    ""id"": ""7e286f10-d669-497e-a361-a6343d550cb2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Atack"",
                    ""type"": ""Button"",
                    ""id"": ""b2d98115-37cf-4afe-ab5b-96958fb7905c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Combo"",
                    ""type"": ""Button"",
                    ""id"": ""0a64faae-ccf8-49fa-a7d4-bbc24775f3a3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""af455294-ebb6-4549-b289-85420904bcd6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0e4ae4bd-718d-4e06-8910-c13576531ef8"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""682a1263-14a8-4ad4-a46a-972069835e47"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""24d0a4ea-1d28-4ce4-ac7d-822048762557"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""e9a367cf-29de-4488-bdbd-dee7b0fab59c"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""6fd13936-8ede-4750-a525-69e305f53ac1"",
                    ""path"": ""<Keyboard>/numpadEnter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c483c92a-d4a8-41cb-9f17-cde4b80bed9c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move2"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b9d6d64a-aacb-41a2-ad4b-e1e78d907354"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""98515be8-44ca-4a84-8e4e-fb12732ef849"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0d103984-578d-436f-a3ca-9de8131b622e"",
                    ""path"": ""<Keyboard>/numpad1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Atack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0cafd896-e439-4f41-97c0-1d27ad665c88"",
                    ""path"": ""<Keyboard>/numpad2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Combo"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player2_map1
        m_Player2_map1 = asset.FindActionMap("Player2_map1", throwIfNotFound: true);
        m_Player2_map1_Move = m_Player2_map1.FindAction("Move", throwIfNotFound: true);
        m_Player2_map1_Interact = m_Player2_map1.FindAction("Interact", throwIfNotFound: true);
        m_Player2_map1_Move2 = m_Player2_map1.FindAction("Move2", throwIfNotFound: true);
        m_Player2_map1_Atack = m_Player2_map1.FindAction("Atack", throwIfNotFound: true);
        m_Player2_map1_Combo = m_Player2_map1.FindAction("Combo", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player2_map1
    private readonly InputActionMap m_Player2_map1;
    private List<IPlayer2_map1Actions> m_Player2_map1ActionsCallbackInterfaces = new List<IPlayer2_map1Actions>();
    private readonly InputAction m_Player2_map1_Move;
    private readonly InputAction m_Player2_map1_Interact;
    private readonly InputAction m_Player2_map1_Move2;
    private readonly InputAction m_Player2_map1_Atack;
    private readonly InputAction m_Player2_map1_Combo;
    public struct Player2_map1Actions
    {
        private @Player2Action m_Wrapper;
        public Player2_map1Actions(@Player2Action wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player2_map1_Move;
        public InputAction @Interact => m_Wrapper.m_Player2_map1_Interact;
        public InputAction @Move2 => m_Wrapper.m_Player2_map1_Move2;
        public InputAction @Atack => m_Wrapper.m_Player2_map1_Atack;
        public InputAction @Combo => m_Wrapper.m_Player2_map1_Combo;
        public InputActionMap Get() { return m_Wrapper.m_Player2_map1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player2_map1Actions set) { return set.Get(); }
        public void AddCallbacks(IPlayer2_map1Actions instance)
        {
            if (instance == null || m_Wrapper.m_Player2_map1ActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_Player2_map1ActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Move2.started += instance.OnMove2;
            @Move2.performed += instance.OnMove2;
            @Move2.canceled += instance.OnMove2;
            @Atack.started += instance.OnAtack;
            @Atack.performed += instance.OnAtack;
            @Atack.canceled += instance.OnAtack;
            @Combo.started += instance.OnCombo;
            @Combo.performed += instance.OnCombo;
            @Combo.canceled += instance.OnCombo;
        }

        private void UnregisterCallbacks(IPlayer2_map1Actions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Move2.started -= instance.OnMove2;
            @Move2.performed -= instance.OnMove2;
            @Move2.canceled -= instance.OnMove2;
            @Atack.started -= instance.OnAtack;
            @Atack.performed -= instance.OnAtack;
            @Atack.canceled -= instance.OnAtack;
            @Combo.started -= instance.OnCombo;
            @Combo.performed -= instance.OnCombo;
            @Combo.canceled -= instance.OnCombo;
        }

        public void RemoveCallbacks(IPlayer2_map1Actions instance)
        {
            if (m_Wrapper.m_Player2_map1ActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayer2_map1Actions instance)
        {
            foreach (var item in m_Wrapper.m_Player2_map1ActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_Player2_map1ActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public Player2_map1Actions @Player2_map1 => new Player2_map1Actions(this);
    public interface IPlayer2_map1Actions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnMove2(InputAction.CallbackContext context);
        void OnAtack(InputAction.CallbackContext context);
        void OnCombo(InputAction.CallbackContext context);
    }
}
